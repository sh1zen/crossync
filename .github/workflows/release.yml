name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'   # Trigger automatically when pushing a tag like v1.2.3
  workflow_dispatch:   # Allows manual execution from the "Actions" tab

permissions:
  contents: write   # Required to create and upload release assets

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Create clean source archives (ZIP + TAR.GZ)
      - name: Create source archives
        run: |
          echo "Cleaning and creating source archives..."
          zip -r "source-${GITHUB_REF_NAME}.zip" . \
            -x '*.git*' \
               'node_modules/*' \
               '__pycache__/*' \
               '*.DS_Store' \
               '*.log'

          tar --exclude-vcs \
              --exclude='node_modules' \
              --exclude='__pycache__' \
              --exclude='*.log' \
              --exclude='.DS_Store' \
              -czf "source-${GITHUB_REF_NAME}.tar.gz" . || true

      # 3. Prepare release notes
      - name: Prepare release notes
        id: notes
        run: |
          echo "Preparing release notes..."
          if [ -f CHANGELOG.md ]; then
            echo "Using CHANGELOG.md as release body"
            cat CHANGELOG.md > RELEASE_BODY.md
          else
            echo "CHANGELOG.md not found — generating basic info..."
            {
              echo "## Release ${GITHUB_REF_NAME}"
              echo ""
              echo "**Repository:** [${GITHUB_REPOSITORY}](https://github.com/${GITHUB_REPOSITORY})"
              echo "**Commit:** [${GITHUB_SHA}](https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA})"
              echo "**Author:** ${GITHUB_ACTOR}"
              echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              echo ""
              echo "This release was automatically generated by GitHub Actions"
            } > RELEASE_BODY.md
          fi

      # 4. Create or update the draft GitHub release
      - name: Create or update draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF_NAME}"
          REPO="${{ github.repository }}"

          echo "Checking if release '${TAG}' already exists..."

          if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            echo "Release '${TAG}' already exists — updating assets..."
          else
            echo "Creating new draft release for ${TAG}..."
            gh release create "$TAG" \
              --repo "$REPO" \
              --title "$TAG" \
              --notes-file RELEASE_BODY.md \
              --draft \
              --prerelease
          fi

          echo "Uploading assets..."
          gh release upload "$TAG" \
            "source-${TAG}.zip" \
            "source-${TAG}.tar.gz" \
            --repo "$REPO" \
            --clobber

      # 5. Summary for easier debugging
      - name: Summary
        run: |
          echo "Release created or updated successfully!"
          echo "https://github.com/${GITHUB_REPOSITORY}/releases/tag/${GITHUB_REF_NAME}"
